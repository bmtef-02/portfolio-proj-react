{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const fetchProjects = () => dispatch => {\n  return fetch(baseUrl + \"projects\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(projects => dispatch(addProjects(projects))).catch(error => dispatch(projectsFailed(error.message)));\n};\nexport const addProjects = projects => ({\n  type: ActionTypes.ADD_PROJECTS,\n  payload: projects\n});\nexport const projectsLoading = () => ({\n  type: ActionTypes.PROJECTS_LOADING\n});\nexport const addProject = project => ({\n  type: ActionTypes.ADD_PROJECT,\n  payload: project\n});\nexport const postProject = (title, category, teamSize, description, languages, yearsOfExp, time, owner_id) => dispatch => {\n  const teamSizeNum = parseInt(teamSize, 10);\n  const newProject = {\n    title,\n    category,\n    teamSize: teamSizeNum,\n    description,\n    languages,\n    yearsOfExp,\n    time,\n    owner_id: 1\n  };\n  newProject.date = new Date().toISOString();\n  return fetch(baseUrl + 'projects', {\n    method: 'POST',\n    body: JSON.stringify(newProject),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error  ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addProject(response))).then(response => alert('Your project has been added') + JSON.stringify(response)).catch(error => {\n    console.log('post project', error.message);\n    alert('Your project could not be posted\\nError: ' + error.message);\n  });\n};\nexport const joinTeam = (projectId, userId) => dispatch => {\n  const addTeam = {\n    team_id: userId\n  };\n  return fetch(baseUrl + 'projects/' + projectId, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json',\n      'Context-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: \"test\"\n    })\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error  ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(function (response) {\n    response.json();\n  }).then(response => console.log(response)).then(response => alert('You have been added to the team!') + JSON.stringify(response)).catch(error => {\n    console.log('Join Team error: ', error.message);\n    alert('You could not be added to the team\\nError: ' + error.message);\n  });\n};\nexport const projectsFailed = errMess => ({\n  type: ActionTypes.PROJECTS_FAILED,\n  payload: errMess\n});\nexport const fetchUsers = () => dispatch => {\n  return fetch(baseUrl + \"users\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(users => dispatch(addUsers(users))).catch(error => dispatch(usersFailed(error.message)));\n};\nexport const addUsers = users => ({\n  type: ActionTypes.ADD_USERS,\n  payload: users\n});\nexport const usersFailed = errMess => ({\n  type: ActionTypes.USERS_FAILED,\n  payload: errMess\n});\nexport const usersLoading = () => ({\n  type: ActionTypes.USERS_LOADING\n});","map":{"version":3,"sources":["/Users/mikerchen/Documents/Nucamp/portfolio-project/portfolio-proj-react/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchProjects","dispatch","fetch","then","response","ok","error","Error","status","statusText","errMess","message","json","projects","addProjects","catch","projectsFailed","type","ADD_PROJECTS","payload","projectsLoading","PROJECTS_LOADING","addProject","project","ADD_PROJECT","postProject","title","category","teamSize","description","languages","yearsOfExp","time","owner_id","teamSizeNum","parseInt","newProject","date","Date","toISOString","method","body","JSON","stringify","headers","alert","console","log","joinTeam","projectId","userId","addTeam","team_id","Accept","PROJECTS_FAILED","fetchUsers","users","addUsers","usersFailed","ADD_USERS","USERS_FAILED","usersLoading","USERS_LOADING"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\nexport const fetchProjects = () => dispatch => {\n\n    return fetch(baseUrl + \"projects\")\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(projects => dispatch(addProjects(projects)))\n        .catch(error => dispatch(projectsFailed(error.message)));\n};\n\nexport const addProjects = projects => ({\n    type: ActionTypes.ADD_PROJECTS,\n    payload: projects\n})\n\nexport const projectsLoading = () => ({\n    type: ActionTypes.PROJECTS_LOADING\n});\n\nexport const addProject = project => ({\n    type: ActionTypes.ADD_PROJECT,\n    payload: project\n});\n\n\nexport const postProject = (title, category, teamSize, description, languages, yearsOfExp, time, owner_id) => dispatch => {\n    const teamSizeNum = parseInt(teamSize, 10)\n    const newProject = {\n        title,\n        category,\n        teamSize : teamSizeNum,\n        description,\n        languages,\n        yearsOfExp,\n        time,\n        owner_id: 1,\n    };\n    newProject.date = new Date().toISOString();\n\n    return fetch(baseUrl + 'projects', {\n        method: 'POST',\n        body: JSON.stringify(newProject),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    .then(response => {\n        if(response.ok) {\n            return response;\n        } else {\n            const error = new Error(`Error  ${response.status}: ${response.statusText}`);\n            error.response = response;\n            throw error;\n            }\n        },\n        error => {throw error;}\n    )\n    .then(response => response.json())\n    .then(response => dispatch(addProject(response)))\n    .then(response => alert('Your project has been added') + JSON.stringify(response))\n    .catch(error => {\n        console.log('post project', error.message);\n        alert('Your project could not be posted\\nError: ' + error.message);\n    });\n};\n\nexport const joinTeam = (projectId, userId) => dispatch => {\n    const addTeam = {\n        team_id: userId\n    }\n\n    return fetch(baseUrl + 'projects/' + projectId, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            'Context-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            title: \"test\"\n        })\n    })\n    .then(response => {\n        if(response.ok) {\n            return response;\n        } else {\n            const error = new Error(`Error  ${response.status}: ${response.statusText}`);\n            error.response = response;\n            throw error;\n            }\n        },\n        error => {throw error;}\n    )\n    .then(function (response) {response.json();})\n    .then(response => console.log(response))\n    .then(response => alert('You have been added to the team!') + JSON.stringify(response))\n    .catch(error => {\n        console.log('Join Team error: ', error.message);\n        alert('You could not be added to the team\\nError: ' + error.message);\n    });\n};\n\nexport const projectsFailed = errMess => ({\n    type: ActionTypes.PROJECTS_FAILED,\n    payload: errMess\n});\n\nexport const fetchUsers = () => dispatch => {\n\n    return fetch(baseUrl + \"users\")\n        .then(response => {\n            if (response.ok) {\n                return response;\n            } else {\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            const errMess = new Error(error.message);\n            throw errMess;\n        }\n    )\n    .then(response => response.json())\n    .then(users=>dispatch(addUsers(users)))\n    .catch(error => dispatch(usersFailed(error.message)));\n};\n\nexport const addUsers = users => ({\n    type: ActionTypes.ADD_USERS,\n    payload: users\n})\n\nexport const usersFailed = errMess => ({\n    type: ActionTypes.USERS_FAILED,\n    payload: errMess\n});\n\nexport const usersLoading = () => ({\n    type: ActionTypes.USERS_LOADING\n});"]},"metadata":{},"sourceType":"module"}